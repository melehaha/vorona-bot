
import asyncio
import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove, FSInputFile
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.filters import Command

API_TOKEN = "7886670102:AAHyVJL0PDn0APmrpe8Lf1gwBTHwOlojm0U"
ADMIN_ID = 378871923

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

class Form(StatesGroup):
    car_exact = State()
    car_help = State()
    feedback = State()

menu_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üöó –†–∞—Å—Å—á–∏—Ç–∞–π –º–Ω–µ –∞–≤—Ç–æ")],
        [KeyboardButton(text="üìÑ –ò–∑—É—á–∏—Ç—å –¥–æ–≥–æ–≤–æ—Ä –∏ –ø—Ä–æ—á–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã")],
        [KeyboardButton(text="üõ† –ö–∞–∫ –≤—Å—ë —Ä–∞–±–æ—Ç–∞–µ—Ç?")],
        [KeyboardButton(text="üí¨ –û—Å—Ç–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ")]
    ],
    resize_keyboard=True
)

docs_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üìÉ –î–æ–≥–æ–≤–æ—Ä")],
        [KeyboardButton(text="üìÑ –ü—Ä–∏–º–µ—Ä –∏–Ω–≤–æ–π—Å–∞")],
        [KeyboardButton(text="üßæ –î–∞–Ω–Ω—ã–µ –æ–± –∞–≥–µ–Ω—Ç–∞—Ö")],
        [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]
    ],
    resize_keyboard=True
)

car_choice_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="‚úÖ –Ø —Ç–æ—á–Ω–æ –∑–Ω–∞—é, –∫–∞–∫–æ–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å —Ö–æ—á—É, —Ä–∞—Å—Å—á–∏—Ç–∞–π—Ç–µ –º–Ω–µ —Å—Ä–µ–¥–Ω—é—é —Å—Ç–æ–∏–º–æ—Å—Ç—å")],
        [KeyboardButton(text="ü§î –ú–Ω–µ –Ω—É–∂–µ–Ω —Å–æ–≤–µ—Ç, —è –∑–Ω–∞—é —Ç–æ–ª—å–∫–æ –±—é–¥–∂–µ—Ç –∏ –ø—Ä–∏–º–µ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å")],
        [KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]
    ],
    resize_keyboard=True
)

@dp.message(Command("start"))
async def cmd_start(message: Message):
    await message.answer(
        "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –≠—Ç–æ –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –∫–æ–º–ø–∞–Ω–∏–∏ vorona.car.\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:",
        reply_markup=menu_kb
    )

@dp.message(F.text == "üöó –†–∞—Å—Å—á–∏—Ç–∞–π –º–Ω–µ –∞–≤—Ç–æ")
async def choose_car_flow(message: Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –≤–∞—Ä–∏–∞–Ω—Ç:", reply_markup=car_choice_kb)

@dp.message(F.text == "‚úÖ –Ø —Ç–æ—á–Ω–æ –∑–Ω–∞—é, –∫–∞–∫–æ–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å —Ö–æ—á—É, —Ä–∞—Å—Å—á–∏—Ç–∞–π—Ç–µ –º–Ω–µ —Å—Ä–µ–¥–Ω—é—é —Å—Ç–æ–∏–º–æ—Å—Ç—å")
async def car_exact(message: Message, state: FSMContext):
    await state.set_state(Form.car_exact)
    await message.answer(
        "–ù–∞–ø–∏—à–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é –º–∞—Ä–∫—É, –º–æ–¥–µ–ª—å, –≥–æ–¥, –∫—É–∑–æ–≤, –ø—Ä–∏–≤–æ–¥ –∏ —Ü–≤–µ—Ç.\n–ß–µ–º –ø–æ–¥—Ä–æ–±–Ω–µ–µ, —Ç–µ–º —Ç–æ—á–Ω–µ–µ –±—É–¥–µ—Ç —Ä–∞—Å—á–µ—Ç.",
        reply_markup=ReplyKeyboardRemove()
    )

@dp.message(F.text == "ü§î –ú–Ω–µ –Ω—É–∂–µ–Ω —Å–æ–≤–µ—Ç, —è –∑–Ω–∞—é —Ç–æ–ª—å–∫–æ –±—é–¥–∂–µ—Ç –∏ –ø—Ä–∏–º–µ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å")
async def car_help(message: Message, state: FSMContext):
    await state.set_state(Form.car_help)
    await message.answer(
        "–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–∏–º–µ—Ä–Ω—ã–π –±—é–¥–∂–µ—Ç –∏ –∫–∞–∫—É—é –º–∞—à–∏–Ω—É –≤—ã —Ö–æ—Ç–∏—Ç–µ.\n–ù–µ —Å—Ç–µ—Å–Ω—è–π—Ç–µ—Å—å, –¥–∞–∂–µ –µ—Å–ª–∏ ‚Äú–∫—Ä–∞—Å–Ω–µ–Ω—å–∫—É—é‚Äù ‚Äî —ç—Ç–æ –≤—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è.",
        reply_markup=ReplyKeyboardRemove()
    )

@dp.message(Form.car_exact)
async def process_exact(message: Message, state: FSMContext):
    text = f"[–¢–û–ß–ù–´–ô –ó–ê–ü–†–û–° –û–¢ {message.from_user.full_name} (@{message.from_user.username})]:\n{message.text}\n\n–ß—Ç–æ–±—ã –æ—Ç–≤–µ—Ç–∏—Ç—å: /–æ—Ç–≤–µ—Ç {message.from_user.id} [–≤–∞—à —Ç–µ–∫—Å—Ç]"
    await bot.send_message(ADMIN_ID, text)
    await message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –∑–∞–ø—Ä–æ—Å! –Ø —Ä–∞—Å—Å–º–æ—Ç—Ä—é –µ–≥–æ –∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–≤–µ—á—É –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è ‚Äî –ø—Ä—è–º–æ –∑–¥–µ—Å—å, –≤ —ç—Ç–æ–º –±–æ—Ç–µ.", reply_markup=menu_kb)
    await state.clear()

@dp.message(Form.car_help)
async def process_help(message: Message, state: FSMContext):
    text = f"[–ü–û–ú–û–©–¨ –° –í–´–ë–û–†–û–ú –û–¢ {message.from_user.full_name} (@{message.from_user.username})]:\n{message.text}\n\n–ß—Ç–æ–±—ã –æ—Ç–≤–µ—Ç–∏—Ç—å: /–æ—Ç–≤–µ—Ç {message.from_user.id} [–≤–∞—à —Ç–µ–∫—Å—Ç]"
    await bot.send_message(ADMIN_ID, text)
    await message.answer("–°–ø–∞—Å–∏–±–æ! –Ø –∏–∑—É—á—É –≤–∞—à –∑–∞–ø—Ä–æ—Å –∏ –æ—Ç–≤–µ—á—É –≤–∞–º –ø—Ä—è–º–æ –∑–¥–µ—Å—å –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.", reply_markup=menu_kb)
    await state.clear()

@dp.message(F.text == "üí¨ –û—Å—Ç–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ")
async def ask_feedback(message: Message, state: FSMContext):
    await state.set_state(Form.feedback)
    await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –Ø –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –µ–≥–æ –ø—Ä–æ—á—Ç—É –∏ –æ—Ç–≤–µ—á—É.")

@dp.message(Form.feedback)
async def handle_feedback(message: Message, state: FSMContext):
    text = f"[–°–û–û–ë–©–ï–ù–ò–ï –û–¢ {message.from_user.full_name} (@{message.from_user.username})]:\n{message.text}\n\n–ß—Ç–æ–±—ã –æ—Ç–≤–µ—Ç–∏—Ç—å: /–æ—Ç–≤–µ—Ç {message.from_user.id} [–≤–∞—à —Ç–µ–∫—Å—Ç]"
    await bot.send_message(ADMIN_ID, text)
    await message.answer("–°–ø–∞—Å–∏–±–æ! –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.", reply_markup=menu_kb)
    await state.clear()

@dp.message(Command("–æ—Ç–≤–µ—Ç"))
async def handle_admin_reply(message: Message):
    if message.from_user.id != ADMIN_ID:
        return

    parts = message.text.split(maxsplit=2)
    if len(parts) < 3:
        await message.answer("‚ùó –§–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã: /–æ—Ç–≤–µ—Ç [user_id] [—Ç–µ–∫—Å—Ç]")
        return

    try:
        target_user_id = int(parts[1])
        reply_text = parts[2]
        await bot.send_message(target_user_id, reply_text)
        await message.answer("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}")

@dp.message(F.text == "üìÑ –ò–∑—É—á–∏—Ç—å –¥–æ–≥–æ–≤–æ—Ä –∏ –ø—Ä–æ—á–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã")
async def docs_menu(message: Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç:", reply_markup=docs_kb)

@dp.message(F.text == "üìÉ –î–æ–≥–æ–≤–æ—Ä")
async def send_dogovor(message: Message):
    await message.answer_document(FSInputFile("dogovor.pdf"))

@dp.message(F.text == "üìÑ –ü—Ä–∏–º–µ—Ä –∏–Ω–≤–æ–π—Å–∞")
async def send_invoice(message: Message):
    await message.answer_document(FSInputFile("invoice.jpeg"))

@dp.message(F.text == "üßæ –î–∞–Ω–Ω—ã–µ –æ–± –∞–≥–µ–Ω—Ç–∞—Ö")
async def send_agents(message: Message):
    await message.answer_document(FSInputFile("agency.png"))

@dp.message(F.text == "üîô –ù–∞–∑–∞–¥")
async def go_back(message: Message):
    await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=menu_kb)

@dp.message(F.text == "üõ† –ö–∞–∫ –≤—Å—ë —Ä–∞–±–æ—Ç–∞–µ—Ç?")
async def how_it_works(message: Message):
    steps = (
        "1. –ú—ã –∑–∞–∫–ª—é—á–∞–µ–º –¥–æ–≥–æ–≤–æ—Ä\n"
        "2. –Ø –Ω–∞—Ö–æ–∂—É –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –∞–≤—Ç–æ –Ω–∞ –∞—É–∫—Ü–∏–æ–Ω–∞—Ö –Ø–ø–æ–Ω–∏–∏\n"
        "3. –†–∞—Å—Å–∫–∞–∑—ã–≤–∞—é –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–π–¥–µ–Ω–Ω–æ–º –∞–≤—Ç–æ\n"
        "4. –ï—Å–ª–∏ –≤–∞—Å –≤—Å—ë —É—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç - –º—ã —Å—Ç–∞–≤–∏–º —Å—Ç–∞–≤–∫—É –Ω–∞ –∞—É–∫—Ü–∏–æ–Ω–µ\n"
        "5. –ö–æ–≥–¥–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—å –∫—É–ø–ª–µ–Ω, —è –ø—Ä–∏—Å—ã–ª–∞—é –≤–∞–º –∏–Ω–≤–æ–π—Å, –≤—ã –æ–ø–ª–∞—á–∏–≤–∞–µ—Ç–µ –µ–≥–æ –≤ –±–∞–Ω–∫–µ\n"
        "6. –ü–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –æ–ø–ª–∞—Ç–∞ –ø—Ä–∏–¥–µ—Ç –≤ –Ø–ø–æ–Ω–∏—é, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Ç–∞–º–æ–∂–µ–Ω–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∏ –≤—ã–¥–∞—á–∞ —ç–∫—Å–ø–æ—Ä—Ç–Ω–æ–≥–æ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞\n"
        "7. –ê–≤—Ç–æ –¥–æ—Å—Ç–∞–≤–ª—è—é—Ç –≤ –ø–æ—Ä—Ç –∏ –ø–µ—Ä–µ–¥–∞—é—Ç —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–∏\n"
        "8. –í –ø–æ—Ä—Ç—É –ø—Ä–æ–≤–æ–¥—è—Ç —Ñ–æ—Ç–æ–æ–ø–∏—Å—å –∏ –ø–æ–≥—Ä—É–∑–∫—É –Ω–∞ –∫–æ—Ä–∞–±–ª—å\n"
        "9. –ü–æ –ø—Ä–∏—Ö–æ–¥—É —Å—É–¥–Ω–∞ –≤ –ø–æ—Ä—Ç –í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫–∞ - –ø–æ–≥—Ä—É–∑–æ—á–Ω–æ-—Ä–∞–∑–≥—Ä—É–∑–æ—á–Ω—ã–µ —Ä–∞–±–æ—Ç—ã, —Ç–∞–º–æ–∂–µ–Ω–Ω–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ, –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –°–ë–ö–¢–°, –≠–ü–¢–°, –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏–∏\n"
        "10. –ï—Å–ª–∏ –≤—ã –≤–æ –í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫–µ - –≤—ã –∑–∞–±–∏—Ä–∞–µ—Ç–µ –∞–≤—Ç–æ–º–æ–±–∏–ª—å. –ï—Å–ª–∏ –Ω–µ—Ç, —è –∑–∞–±–∏—Ä–∞—é –∞–≤—Ç–æ –∏ —Å—Ç–∞–≤–ª—é –Ω–∞ –∞–≤—Ç–æ–≤–æ–∑, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–ø—Ä–∞–≤–∏—Ç –µ–≥–æ –≤ –≤–∞—à –≥–æ—Ä–æ–¥\n\n"
        "P.S.: –ï—Å–ª–∏ —á–µ—Å—Ç–Ω–æ, —Å—É—Ö–∏–º —Ç–µ–∫—Å—Ç–æ–º —á–∏—Ç–∞—Ç—å —ç—Ç–æ —Å–∫—É—á–Ω–æ, –ø–æ—ç—Ç–æ–º—É –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –≤ –∏–Ω—Å—Ç: @vorona.car, —Ç–∞–º —è —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞—é –æ–±–æ –≤—Å—ë–º —ç—Ç–æ–º –∏–Ω—Ç–µ—Ä–µ—Å–Ω–µ–π!"
    )
    await message.answer(steps)


@dp.message(Command("–æ—Ç–≤–µ—Ç"))
async def reply_command(message: Message):
    try:
        parts = message.text.split(maxsplit=2)
        user_id = int(parts[1])
        text = parts[2]
        await bot.send_message(user_id, text)
        await message.answer("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}")


async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
